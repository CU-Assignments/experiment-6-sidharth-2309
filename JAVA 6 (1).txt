~~*_Experiment -6_*~~ 
Develop Java programs using lambda expressions and stream operations for sorting, filtering, and processing large datasets efficiently.

Easy Level:
Write a program to sort a list of Employee objects (name, age, salary) using lambda expressions.

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Employee {
    private String name;
    private int age;
    private double salary;

    public Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public double getSalary() {
        return salary;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", salary=" + salary +
                '}';
    }
}

public class EasyLevel {
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("John", 30, 50000));
        employees.add(new Employee("Alice", 25, 60000));
        employees.add(new Employee("Bob", 35, 70000));

        // Sorting using lambda expression
        employees.sort((e1, e2) -> Integer.compare(e1.getAge(), e2.getAge()));

        System.out.println("Sorted Employees by Age:");
        employees.forEach(System.out::println);
    }
}

OUTPUT:

Sorted Employees by Age:
Employee{name='Alice', age=25, salary=60000.0}
Employee{name='John', age=30, salary=50000.0}
Employee{name='Bob', age=35, salary=70000.0}
